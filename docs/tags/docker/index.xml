<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on 二次元の技术宅</title><link>/tags/docker/</link><description>Recent content in Docker on 二次元の技术宅</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 18 May 2024 09:36:41 +0800</lastBuildDate><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>解决容器内运行laravel定时任务导致大量进程的问题</title><link>/post/2024/05/crond-in-container-schdule-zombies/</link><pubDate>Sat, 18 May 2024 09:36:41 +0800</pubDate><guid>/post/2024/05/crond-in-container-schdule-zombies/</guid><description>&lt;p>起因是内网服务器每隔一阵就会失去网络连接，而且外接键鼠也会没有反应。那必定是什么程序占用了大量系统资源，想想只有近期部署的horizon和schedule服务可能出现这个问题。直觉一位&lt;code>php artisan schedule:run&lt;/code>运行结束后就退出了，没有副作用。我便关注起horizon服务了，这反而让我踩了坑，因为僵尸进程恰恰就是schedule服务间接造成的。还是要经常打破思维惯性，常规之外总有意外。&lt;/p>
&lt;p>在此说明下schedule服务的部署方式，方便大家与自身场景比对。laravel schedule中定义的任务都是&lt;code>runInBackground&lt;/code>模式。schedule服务是以容器内部的定时来运行的，即&lt;code>crond&lt;/code>是容器的init进程（pid 0），它根据我定义的crontabs文件，进一步调用schedule命令。直接造成僵尸进程的“罪魁祸首”便是有些无辜的crond了。我仿佛听到它一脸无辜地申辩：我不知道啊！言归正传，下面记录了僵尸进程的发现和解决方法。&lt;/p></description></item><item><title>以非root用户运行docker服务</title><link>/post/2021/05/docker-non-root/</link><pubDate>Fri, 14 May 2021 15:02:33 +0800</pubDate><guid>/post/2021/05/docker-non-root/</guid><description>某些场景下可能需要使用以非root用户来运行docker服务，以保证系统的安全性。 参考文章 Run the Docker daemon as a non-root user (Rootless mode)</description></item><item><title>云锁导致的Docker镜像拉取失败</title><link>/post/2020/03/docker-pull-failure-caused-by-yunsuo/</link><pubDate>Sun, 22 Mar 2020 23:57:59 +0800</pubDate><guid>/post/2020/03/docker-pull-failure-caused-by-yunsuo/</guid><description>&lt;p>上周遇到了MTU导致的Docker镜像拉取失败，这次又遇到了奇怪的情况导致镜像拉取失败。&lt;/p></description></item><item><title>MacOS Docker Volume性能优化</title><link>/post/2020/03/macos-docker-volumes-cached/</link><pubDate>Thu, 12 Mar 2020 20:01:56 +0800</pubDate><guid>/post/2020/03/macos-docker-volumes-cached/</guid><description>&lt;p>去年，我的燃7000出现了一些软硬件故障，便狠下心换了一个二手的15款MBP，从此告别了折腾linux的日子。然而，日常开发时却发现docker的响应速度远不如之前的linux。好在还有优化的空间。&lt;/p></description></item><item><title>Docker绑定网卡</title><link>/post/2020/02/docker-eth-binding/</link><pubDate>Wed, 19 Feb 2020 23:26:22 +0800</pubDate><guid>/post/2020/02/docker-eth-binding/</guid><description>&lt;p>主机多网卡的情况下，可能会涉及容器和网卡的绑定。主要分两个方向：入口流量网卡的绑定、出口流浪网卡的绑定。&lt;/p></description></item><item><title>Docker新手常见问题</title><link>/post/2020/02/docker-faqs-for-green-hand/</link><pubDate>Sat, 15 Feb 2020 14:20:35 +0800</pubDate><guid>/post/2020/02/docker-faqs-for-green-hand/</guid><description>&lt;p>网络互访问题、入口脚本问题等&lt;/p></description></item><item><title>docker的安装和使用</title><link>/post/2018/02/use-docker/</link><pubDate>Sat, 03 Feb 2018 21:36:07 +0800</pubDate><guid>/post/2018/02/use-docker/</guid><description>&lt;pre>&lt;code> __________________
&amp;lt; 不解释了，快上船 &amp;gt;
 ------------------
 \
 \
 \
 ## .
 ## ## ## ==
 ## ## ## ## ===
 /&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;___/ ===
 ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ / ===- ~~~
 \______ o __/
 \ \ __/
 \____\______/
&lt;/code>&lt;/pre></description></item><item><title>使用docker搭建php开发环境</title><link>/post/2018/01/docker-php-server/</link><pubDate>Sun, 28 Jan 2018 15:42:58 +0800</pubDate><guid>/post/2018/01/docker-php-server/</guid><description>&lt;p>**本文年代久远，可能已经不适用。仅供参考！**新的php镜像参考&lt;a href="https://hub.docker.com/r/maoxuner/php" target="_blank">maoxuner/php
&lt;/a>。&lt;/p>
&lt;p>&lt;del>多容器 apache+php+mariadb+redis&lt;/del>&lt;/p></description></item></channel></rss>