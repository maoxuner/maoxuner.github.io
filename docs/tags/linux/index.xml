<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on 二次元の技术宅</title><link>/tags/linux/</link><description>Recent content in Linux on 二次元の技术宅</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 31 Jul 2023 13:55:58 +0800</lastBuildDate><atom:link href="/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>解决Archlinux上Navicat15因glib2不兼容报错问题</title><link>/post/2021/09/navicat-with-glib2-70/</link><pubDate>Thu, 23 Sep 2021 00:30:58 +0800</pubDate><guid>/post/2021/09/navicat-with-glib2-70/</guid><description>&lt;p>&lt;del>当前版本&lt;code>2022年8月2日&lt;/code>Archlinux系统软件包支持原版navicat15运行，不需要额外打补丁。&lt;/del>&lt;/p>
&lt;h2 id="当前navicat已经更新到16了由于没有正版许可证linux版注册机因此一直停留在老版本15由此引发的软件包不兼容问题越来越多">当前navicat已经更新到16了，由于没有正版许可证&lt;del>Linux版注册机&lt;/del>，因此一直停留在老版本15。由此引发的软件包不兼容问题越来越多。&lt;/h2>
&lt;p>习惯性地更新了Archlinux所有软件包，发现Navicat无法运行了。命令行运行报错如下：&lt;/p>
&lt;pre>&lt;code>symbol lookup error: /usr/lib/libgio-2.0.so.0: undefined symbol: g_module_open_full
&lt;/code>&lt;/pre>
&lt;p>网上查到&lt;code>libgio-2.0.so.0&lt;/code>是&lt;code>glib2&lt;/code>包的文件，显然是版本不兼容了。考虑到AppImage本质上就是把各依赖库打包起来做成了便携应用，便考虑把老版本的&lt;code>glib2&lt;/code>打包进应用镜像，结果完美解决。&lt;/p></description></item><item><title>Archlinux添加自签名证书到系统</title><link>/post/2021/05/archlinux-self-signed-cert/</link><pubDate>Fri, 14 May 2021 15:25:17 +0800</pubDate><guid>/post/2021/05/archlinux-self-signed-cert/</guid><description>&lt;p>Web本地开发时可能要用到自签名证书来进行https访问。&lt;/p></description></item><item><title>以非root用户运行docker服务</title><link>/post/2021/05/docker-non-root/</link><pubDate>Fri, 14 May 2021 15:02:33 +0800</pubDate><guid>/post/2021/05/docker-non-root/</guid><description>某些场景下可能需要使用以非root用户来运行docker服务，以保证系统的安全性。 参考文章 Run the Docker daemon as a non-root user (Rootless mode)</description></item><item><title>云锁导致的Docker镜像拉取失败</title><link>/post/2020/03/docker-pull-failure-caused-by-yunsuo/</link><pubDate>Sun, 22 Mar 2020 23:57:59 +0800</pubDate><guid>/post/2020/03/docker-pull-failure-caused-by-yunsuo/</guid><description>&lt;p>上周遇到了MTU导致的Docker镜像拉取失败，这次又遇到了奇怪的情况导致镜像拉取失败。&lt;/p></description></item><item><title>因MTU导致的容器网络问题</title><link>/post/2020/03/host-container-mtu/</link><pubDate>Sun, 15 Mar 2020 23:17:50 +0800</pubDate><guid>/post/2020/03/host-container-mtu/</guid><description>&lt;p>将CI/CD服务前移到&lt;a href="https://kubernetes.io/" target="_blank">k8s&lt;/a>后，当&lt;a href="https://drone.io/" target="_blank">drone&lt;/a>的插件&lt;a href="https://github.com/drone-plugins/drone-docker" target="_blank">drone-docker&lt;/a>构建镜像时，总卡在更新软件包的步骤。是网络连接的问题，为了解决这个问题，耗费了我整个周末。&lt;/p>
&lt;pre>&lt;code class="language-bash"># apk update
fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main/x86_64/APKINDEX.tar.gz
&lt;/code>&lt;/pre></description></item><item><title>K8S Dashboard的Ingress配置</title><link>/post/2020/03/kubernetes-dashboard-ingress/</link><pubDate>Sat, 14 Mar 2020 11:21:40 +0800</pubDate><guid>/post/2020/03/kubernetes-dashboard-ingress/</guid><description>&lt;p>&lt;a href="https://github.com/kubernetes/dashboard" target="_blank">Kubernetes Dashboard&lt;/a>的后端必须通过https访问，是自签名的ssl证书。使用Ingress连接时，会出现证书验证的问题，因此要配置Ingress忽略ssl验证。&lt;/p></description></item><item><title>ArchLinux将屏幕扩展到平板上</title><link>/post/2020/02/archlinux-multihead/</link><pubDate>Thu, 20 Feb 2020 14:03:53 +0800</pubDate><guid>/post/2020/02/archlinux-multihead/</guid><description>&lt;p>在有扩展显示器之前，有个奇思妙想：将桌面内容扩展到安卓平板上。Windows和MacOS似乎有现成的解决方案，而Linux则需要折腾一番。我的思路是：在Linux上创建一个虚拟桌面，然后通过VNC连接到这个桌面上。&lt;/p></description></item><item><title>Linux文件权限笔记</title><link>/post/2020/02/linux-permission/</link><pubDate>Thu, 20 Feb 2020 13:29:02 +0800</pubDate><guid>/post/2020/02/linux-permission/</guid><description/></item><item><title>树莓派3B+无显示器安装系统</title><link>/post/2020/02/rpi3-initialization/</link><pubDate>Thu, 20 Feb 2020 12:34:21 +0800</pubDate><guid>/post/2020/02/rpi3-initialization/</guid><description>&lt;p>用上VPS后，发现树莓派真是太鸡肋了，主要是配置太低了。可能更适合组集群的土豪玩法。&lt;/p></description></item><item><title>KVM笔记</title><link>/post/2020/02/kvm/</link><pubDate>Sun, 16 Feb 2020 21:29:07 +0800</pubDate><guid>/post/2020/02/kvm/</guid><description>&lt;p>如果常用软件有很好的解决方案，我宁愿使用linux系统。各种工具很方便，系统完全在自己的掌控之内。KVM入门后就再也看不上其他虚拟机。&lt;/p></description></item><item><title>禁止SSH验证主机秘钥</title><link>/post/2020/02/disable-ssh-host-key-checking/</link><pubDate>Sun, 16 Feb 2020 18:34:10 +0800</pubDate><guid>/post/2020/02/disable-ssh-host-key-checking/</guid><description>&lt;p>对于家里以及公司内网的服务器，可能内网IP是相同的，这就会造成经常性的主机秘钥验证不通过的问题。可以禁用这些主机的秘钥验证。&lt;/p></description></item><item><title>AlpineLinux使用gclibc</title><link>/post/2020/02/alpinelinux-uclibc-to-gclibc/</link><pubDate>Sun, 16 Feb 2020 16:05:23 +0800</pubDate><guid>/post/2020/02/alpinelinux-uclibc-to-gclibc/</guid><description>&lt;p>AlpineLinux默认使用uclibc版本的busybox，其动态链接库与gclibc有些区别，会导致某些程序没有办法正常运行。可以将busybox版本切换为gclibc。&lt;/p></description></item><item><title>Nginx域名主机批量配置</title><link>/post/2020/02/nginx-mass-dynamic-vhost/</link><pubDate>Sat, 15 Feb 2020 16:23:24 +0800</pubDate><guid>/post/2020/02/nginx-mass-dynamic-vhost/</guid><description>&lt;p>开发环境中一个个的配置域名和根目录比较麻烦，自动实现域名到目录的绑定会更加便捷。&lt;/p></description></item><item><title>使用Gurb2制作Linux与Windows以及Legacy与UEFI双模式启动盘</title><link>/post/2020/02/grub2-bootable-device/</link><pubDate>Sat, 15 Feb 2020 14:02:35 +0800</pubDate><guid>/post/2020/02/grub2-bootable-device/</guid><description>&lt;p>经常要给Windows或者Linux系统装机，每次都要制作启动盘，显得有点麻烦。Grub4dos似乎只能用于Legacy模式的启动，因此使用万能的Grub2才是最终解。挖坑待填&lt;/p></description></item><item><title>Apache服务器通过Rewrite规则绑定域名目录</title><link>/post/2020/02/apache-vhost-domain-subdirectory-bindings/</link><pubDate>Sat, 15 Feb 2020 13:35:47 +0800</pubDate><guid>/post/2020/02/apache-vhost-domain-subdirectory-bindings/</guid><description>&lt;h1 id="apache服务器通过rewrite规则绑定域名目录">Apache服务器通过Rewrite规则绑定域名目录&lt;/h1>
&lt;p>使用虚拟主机时，由于不能自定义VirtualHost，因此只能通过重写规则来绑定域名和目录。前提是服务器允许使用&lt;code>.htaccess&lt;/code>并启用了重写规则。&lt;/p></description></item><item><title>日常使用ArchLinux</title><link>/post/2018/03/archlinux-as-usual/</link><pubDate>Fri, 23 Mar 2018 14:14:29 +0800</pubDate><guid>/post/2018/03/archlinux-as-usual/</guid><description>&lt;p>简单来说，受够了windows，买不起osx，就只能折腾linux。折腾了好几个发行版，这次换了archlinux了。理由很简单：软件版本新、滚动发行、&lt;del>yaourt&lt;/del> yay一切。&lt;/p>
&lt;hr>
&lt;p>折腾了一阵子MacOS，发现它的软件管理太麻烦了：&lt;/p>
&lt;ul>
&lt;li>AppStore（系统更新、部分软件包）&lt;/li>
&lt;li>网络上的软件包&lt;/li>
&lt;li>HomeBrew（GNU、Casks）&lt;/li>
&lt;/ul>
&lt;p>大部分Casks不能更换软件源，更新速度极慢，加上Mac机器老旧，新上市的AMD yes等原因，便回到了linux阵营。&lt;/p></description></item><item><title>使用grub2制作bios和uefi双启动u盘</title><link>/post/2018/03/usb-grub2-bios-uefi/</link><pubDate>Fri, 23 Mar 2018 12:33:33 +0800</pubDate><guid>/post/2018/03/usb-grub2-bios-uefi/</guid><description>&lt;p>应对复杂的装机环境，bios/uefi，windows/linux。&lt;/p></description></item><item><title>折腾ArchLinux</title><link>/post/2018/03/try-archlinux/</link><pubDate>Tue, 06 Mar 2018 09:25:21 +0800</pubDate><guid>/post/2018/03/try-archlinux/</guid><description>&lt;p>日常使用&lt;a href="https://www.deepin.org" target="_blank">deepin&lt;/a>一年多，开箱即用，而且中国特色化做得很好。然而，在用的过程中总觉得缺点啥。于是我又开始了新一轮的尝试。
ArchLinux，简洁、海量包、滚动发行。不过，最让我印象深刻的是它全面的wiki，尽管汉化wiki跟不上进度。最新的软件包，使得我更新和安装软件很便利。&lt;/p></description></item><item><title>为vps添加swap</title><link>/post/2018/01/kvm-vps-swap-file/</link><pubDate>Wed, 03 Jan 2018 01:08:17 +0800</pubDate><guid>/post/2018/01/kvm-vps-swap-file/</guid><description>&lt;p>适用于kvm架构的vps。openvz不支持。&lt;/p></description></item><item><title>使用Let'sEncrypt证书</title><link>/post/2017/12/letsencrypt/</link><pubDate>Fri, 29 Dec 2017 13:12:37 +0800</pubDate><guid>/post/2017/12/letsencrypt/</guid><description>&lt;p>Apache服务器配置使用https（ssl）。需求：vps管理权限。&lt;/p></description></item><item><title>ubuntu谷歌浏览器使用flash插件</title><link>/post/2017/04/ubuntu%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BD%BF%E7%94%A8flash%E6%8F%92%E4%BB%B6/</link><pubDate>Sun, 30 Apr 2017 12:21:13 +0800</pubDate><guid>/post/2017/04/ubuntu%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BD%BF%E7%94%A8flash%E6%8F%92%E4%BB%B6/</guid><description>&lt;p>&lt;strong>本文年代久远，可能已经不适用。仅供参考！&lt;/strong>&lt;/p>
&lt;p>Ubuntu/Debian上默认没有安装flash插件，需要手动安装并调用插件。&lt;strong>flash早晚会成为历史的尘埃，建议不要再折腾了&lt;/strong>&lt;/p></description></item><item><title>Apache运行时的系统环境变量设置</title><link>/post/2017/04/apache-system-environment-variables/</link><pubDate>Wed, 26 Apr 2017 15:00:59 +0800</pubDate><guid>/post/2017/04/apache-system-environment-variables/</guid><description>&lt;p>最近在研究git的webhook，想以此实现代码的自动部署。其核心内容就是一个php函数&lt;code>shell_exec()&lt;/code>。我找到了一个厉害的php部署工具，叫做&lt;a href="https://deployer.org" target="_blank">Deployer&lt;/a>。尽管如此，还是遇到了一个很大的坑。&lt;/p>
&lt;p>首先说明一下，这里所说的环境变量，是linux服务器上执行&lt;code>env&lt;/code>命令得到的环境变量，为了与apache服务器本身的环境变量区分开来，这里将前者称为系统环境变量。&lt;/p></description></item><item><title>LNMPA专题</title><link>/post/2017/04/lnmpa/</link><pubDate>Thu, 06 Apr 2017 21:45:55 +0800</pubDate><guid>/post/2017/04/lnmpa/</guid><description>&lt;p>主要针对 Apache2+PHP7.0+MariaDB&lt;/p></description></item><item><title>香蕉派bananian的flash插件方案Iceweasel+Freshplayerplugin+PepperFlashPlayer</title><link>/post/2015/11/flash-on-bpi/</link><pubDate>Fri, 27 Nov 2015 22:11:20 +0800</pubDate><guid>/post/2015/11/flash-on-bpi/</guid><description>&lt;p>香蕉派/BPI刷了bananian系统，也就是debian arm了，我是把它作为服务器用的，所以一直没有在意浏览器以及flash视频播放的问题。当然，我也早就发现了flash插件的问题。就拖沓着，一直没解决，直到我在debian的维基上看到了“Use Pepper Flash with Iceweasel using Freshplayerplugin”这句话，我才有了新的思路。&lt;/p></description></item><item><title>香蕉派BPIbananian1508编译小度Wifi mt7601u驱动</title><link>/post/2015/11/bpi-bananian-xiaoduwifi/</link><pubDate>Wed, 11 Nov 2015 22:45:20 +0800</pubDate><guid>/post/2015/11/bpi-bananian-xiaoduwifi/</guid><description>&lt;p>零零碎碎的时间，折腾了好久，看了不知道多少帖子，教程，终于在香蕉派成功编译并加载了小度Wifi的驱动。其实也就是360Wifi，小米Wifi，腾讯Wifi等的驱动。因为它们基本都是mt7601u的芯片。好了，废话不多说，进入主题。&lt;/p></description></item><item><title>Linux挂载Raw格式的img文件</title><link>/post/2015/02/mount-raw-img/</link><pubDate>Tue, 24 Feb 2015 16:37:20 +0800</pubDate><guid>/post/2015/02/mount-raw-img/</guid><description>&lt;p>在折腾树莓派/香蕉派的时候，想直接复制img镜像中的文件。烧录到SD又太麻烦，就想找找有没有能直接挂载img的方式。这一找，果然还真有。&lt;/p></description></item><item><title>树莓派断网检测自动重连</title><link>/post/2015/02/rpi-check-network/</link><pubDate>Tue, 03 Feb 2015 21:06:20 +0800</pubDate><guid>/post/2015/02/rpi-check-network/</guid><description>&lt;p>想必，大多数人都是跟我一样玩树莓派的，把树莓派作为一台服务器，接入路由器下的局域网。没有显示器，也没有用TTL。树莓派的控制可以用SSH。然而，要是路由器死机重启，树莓派就失去控制了。另外，树莓派运行多天后好像也有断网的情况。遇到这种情况，就只能暴力的拔电源了。有木有一种和平一点的方式呢。自然，这是有的。搜罗了整个互联网，总算是找了两个挺不错的解决方案。&lt;/p></description></item><item><title>树莓派安装ArchLinuxARM系统</title><link>/post/2015/02/rpi-archlinuxarm/</link><pubDate>Tue, 03 Feb 2015 20:12:20 +0800</pubDate><guid>/post/2015/02/rpi-archlinuxarm/</guid><description>&lt;p>本文适用于树莓派1B+。其它板子未经过测试，可参考&lt;a href="https://archlinuxarm.org/platforms" target="_blank">ArchlinuxARM官方文档&lt;/a>。
首先，需要一个linux环境，系统的安装需要用linux环境复制文件，把sd或tf连接到装有linux环境的电脑上。&lt;/p></description></item><item><title>实体机已有windows安装ubuntu系统 双系统</title><link>/post/2015/02/windows-with-ubuntu/</link><pubDate>Tue, 03 Feb 2015 20:10:20 +0800</pubDate><guid>/post/2015/02/windows-with-ubuntu/</guid><description>&lt;p>&lt;strong>本文年代久远，可能已经不再适用。仅供参考&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>首先说一下，双系统并不会影响两个系统各自的速度。两个系统都是独立的，分别位于硬盘的不同位置，独立运行。也就是说，当一个系统在运行时，另一个系统只是储存在硬盘上的文件，这自然不会对系统的速度有影响。&lt;/p>
&lt;p>另外，安装双系统是有好处的。需要看这篇文章的人即使不是linux的新手，那至少也是ubuntu的新手。那我建议，你还是装双系统的好。因为，linux系的软件什么的支持还不是很好，若不是高手的话，遇到问题往往无从下手。安装双系统的话，即使linux系统不能很快适应或者完美配置，那还能切回windows系统进行日常操作。&lt;/p></description></item></channel></rss>